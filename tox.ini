[tox]
envlist =
    lint,
    {flake8,pylint},
    mypy,
    bandit,
    doc8, readme, docs,
    # prone to false positives
    vulture
skipsdist = True

##############################################################################################
# Additional environments:                                                                   #
#                                                                                            #
# autoformat : Apply all autoformatters.                                                     #
# lint :: Run all linters.                                                                   #
# vulture :: Run vulture. Prone to false-positives.                                          #
#                                                                                            #
# Operational helper environments:                                                           #
#                                                                                            #
# docs :: Build Sphinx documentation.                                                        #
# autodocs :: Build Sphinx documentation and start server, autobuilding on any file changes. #
# park :: Build name-parking packages using pypi-parker.                                     #
# build :: Build source and wheel dist files.                                                #
# test-release :: Build dist files and upload to testpypi pypirc profile.                    #
# release :: Build dist files and upload to pypi pypirc profile.                             #
##############################################################################################

#########
# Tests #
#########

[testenv]
skip_install = True
sitepackages = False

# pipipxx tests cannot run inside virtual environments :(

###############
# Type checks #
###############

[testenv:mypy-coverage]
commands =
    # Make mypy linecoverage report readable by coverage
    python -c \
        "t = open('.coverage', 'w');\
        c = open('build/coverage.json').read();\
        t.write('!coverage.py: This is a private format, don\'t read it directly!\n');\
        t.write(c);\
        t.close()"
    coverage report -m

[testenv:mypy]
basepython = python3
deps =
    # mypy outputs coverage data in a coverage 4.x format
    coverage~=4.0
    mypy>=0.650
    mypy_extensions
    typing>=3.6.2
commands =
    python -m mypy \
        --linecoverage-report build \
        setup.py \
        {posargs}
    {[testenv:mypy-coverage]commands}

###############################
# Formatting and style checks #
###############################

[testenv:flake8]
basepython = python3
deps =
    flake8
    flake8-docstrings
    flake8-isort
    flake8-print>=3.1.0
    flake8-bugbear
commands =
    flake8 \
        setup.py \
        doc/conf.py

[testenv:pylint]
basepython = python3
deps =
    pyflakes
    pylint>=2.0.0
commands =
    pylint \
        --rcfile=pylintrc \
        setup.py \
        doc/conf.py

[testenv:bandit]
basepython = python3
deps = bandit
commands = bandit \
    # B322: Ignore Python 2 input check: we only support Python 3
    -s B322 \
    -r setup.py

# Prone to false positives: only run manually
[testenv:vulture]
basepython = python3
deps = vulture
commands = vulture setup.py

[testenv:blacken-src]
basepython = python3
deps =
    black
commands =
    black --line-length 120 \
        setup.py \
        doc/conf.py \
        test \
        {posargs}

[testenv:blacken]
basepython = python3
deps =
    {[testenv:blacken-src]deps}
commands =
    {[testenv:blacken-src]commands}

[testenv:isort-seed]
basepython = python3
deps = seed-isort-config
commands = seed-isort-config

[testenv:isort]
basepython = python3
deps = isort
commands = isort \
    -rc \
        test \
        doc \
        setup.py \
    {posargs}

[testenv:autoformat]
basepython = python3
deps =
    {[testenv:isort-seed]deps}
    {[testenv:isort]deps}
    {[testenv:blacken]deps}
commands =
    {[testenv:isort-seed]commands}
    {[testenv:isort]commands}
    {[testenv:blacken]commands}

[testenv:doc8]
basepython = python3
whitelist_externals = {[testenv:resetdocs]whitelist_externals}
deps =
    sphinx
    doc8
commands =
    {[testenv:resetdocs]commands}
    doc8 doc/index.rst doc/lib/ README.rst CHANGELOG.rst

[testenv:readme]
basepython = python3
deps = readme_renderer
commands = python setup.py check -r -s

[testenv:lint]
basepython = python3
# This lets this testenv execute all commands,
#  even if some fail. If *any* fail,
#  the command still fails,
#  but this lets us get the failing results
#  for all commands at once.
ignore_errors=true
whitelist_externals = {[testenv:resetdocs]whitelist_externals}
deps =
    {[testenv:autoformat]deps}
    {[testenv:flake8]deps}
    {[testenv:pylint]deps}
    {[testenv:doc8]deps}
    {[testenv:readme]deps}
    {[testenv:bandit]deps}
commands =
    {[testenv:autoformat]commands}
    {[testenv:flake8]commands}
    {[testenv:pylint]commands}
    {[testenv:doc8]commands}
    {[testenv:readme]commands}
    {[testenv:bandit]commands}

#################
# Documentation #
#################

# Clear out any generated files from doc/
[testenv:resetdocs]
skip_install = true
deps =
whitelist_externals =
    mkdir
    rm
commands =
    # Make sure that the directory exists to avoid
    # potential side effects of using rm -f
    mkdir -p {toxinidir}/doc/lib/generated
    rm -r {toxinidir}/doc/lib/generated

[testenv:assert-file-is-empty]
basepython = python3
commands =
    python -c \
        "import sys;\
        f = open(sys.argv[-1], 'r');\
        contents = f.read();\
        sys.exit(contents if contents.strip() else 0);\
        f.close()" \
        {posargs}

[testenv:docs-build]
basepython = python3
deps = {[testenv:docs]deps}
commands =
    sphinx-build -E -c {toxinidir}/doc/ -b html {toxinidir}/doc/ {toxinidir}/doc/build/html
    {[testenv:assert-file-is-empty]commands} "{toxinidir}/doc/build/html/output.txt"

[testenv:docs-spelling]
basepython = python3
deps = {[testenv:docs]deps}
commands =
    sphinx-build -E -c {toxinidir}/doc/  -b spelling {toxinidir}/doc/ {toxinidir}/doc/build/spelling
    {[testenv:assert-file-is-empty]commands} "{toxinidir}/doc/build/spelling/output.txt"

[testenv:docs-linkcheck]
basepython = python3
deps = {[testenv:docs]deps}
commands =
    sphinx-build -E -c {toxinidir}/doc/ -b linkcheck {toxinidir}/doc/ {toxinidir}/doc/build/linkcheck
    {[testenv:assert-file-is-empty]commands} "{toxinidir}/doc/build/linkcheck/output.txt"

[testenv:docs]
basepython = python3
deps =
    -r{toxinidir}/doc/requirements.txt
commands =
    {[testenv:docs-build]commands}
    {[testenv:docs-spelling]commands}
    {[testenv:docs-linkcheck]commands}

[testenv:autodocs]
basepython = python3
deps =
    {[testenv:docs]deps}
    sphinx-autobuild
commands =
    sphinx-autobuild -E -c {toxinidir}/doc/ -b html {toxinidir}/doc/ {toxinidir}/doc/build/html \
        --watch . \
        --ignore .git/*

###################
# Release tooling #
###################

[testenv:park]
basepython = python3
skip_install = true
deps =
    pypi-parker
    setuptools
commands = python setup.py park

[testenv:build]
basepython = python3
skip_install = true
setenv =
    BUILDING_PIPX_IN_PIPX=1
deps =
    wheel
    setuptools
# This only really works with source builds.
commands =
    python setup.py sdist

[testenv:test-release]
basepython = python3
skip_install = true
setenv = {[testenv:build]setenv}
deps =
    {[testenv:park]deps}
    {[testenv:build]deps}
    twine
commands =
    {[testenv:park]commands}
    {[testenv:build]commands}
    twine upload --skip-existing --repository testpypi dist/*

[testenv:release]
basepython = python3
skip_install = true
setenv = {[testenv:build]setenv}
deps =
    {[testenv:park]deps}
    {[testenv:build]deps}
    twine
commands =
    {[testenv:park]commands}
    {[testenv:build]commands}
    twine upload --skip-existing --repository pypi dist/*
